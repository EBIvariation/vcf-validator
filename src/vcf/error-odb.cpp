// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "vcf/error-odb.hpp"

#include <cassert>
#include <cstring>  // std::memcpy
#include <typeinfo>

#include <odb/polymorphic-map.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/polymorphic-object-statements.hxx>
#include <odb/sqlite/view-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>
#include <odb/sqlite/polymorphic-object-result.hxx>
#include <odb/sqlite/view-result.hxx>

namespace odb
{
  // Error
  //

  struct access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::id_type
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::id_type
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::discriminator_type
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  discriminator (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    discriminator_type d;
    {
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        d,
        i.typeid_value,
        i.typeid_size,
        i.typeid_null);
    }

    return d;
  }

  bool access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // line
    //
    t[0UL] = false;

    // message
    //
    if (t[1UL])
    {
      i.message_value.capacity (i.message_size);
      grew = true;
    }

    // detailed_message
    //
    if (t[2UL])
    {
      i.detailed_message_value.capacity (i.detailed_message_size);
      grew = true;
    }

    // severity
    //
    t[3UL] = false;

    // id_
    //
    t[4UL] = false;

    // typeid_
    //
    if (t[5UL])
    {
      i.typeid_value.capacity (i.typeid_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // line
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.line_value;
      b[n].is_null = &i.line_null;
      n++;
    }

    // message
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.message_value.data ();
      b[n].size = &i.message_size;
      b[n].capacity = i.message_value.capacity ();
      b[n].is_null = &i.message_null;
      n++;
    }

    // detailed_message
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.detailed_message_value.data ();
      b[n].size = &i.detailed_message_size;
      b[n].capacity = i.detailed_message_value.capacity ();
      b[n].is_null = &i.detailed_message_null;
      n++;
    }

    // severity
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.severity_value;
    b[n].is_null = &i.severity_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // typeid_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.typeid_value.data ();
      b[n].size = &i.typeid_size;
      b[n].capacity = i.typeid_value.capacity ();
      b[n].is_null = &i.typeid_null;
      n++;
    }
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // line
    //
    if (sk == statement_insert)
    {
      ::size_t const& v =
        o.line;

      bool is_null (false);
      sqlite::value_traits<
          ::size_t,
          sqlite::id_integer >::set_image (
        i.line_value,
        is_null,
        v);
      i.line_null = is_null;
    }

    // message
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.message;

      bool is_null (false);
      std::size_t cap (i.message_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.message_value,
        i.message_size,
        is_null,
        v);
      i.message_null = is_null;
      grew = grew || (cap != i.message_value.capacity ());
    }

    // detailed_message
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.detailed_message;

      bool is_null (false);
      std::size_t cap (i.detailed_message_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.detailed_message_value,
        i.detailed_message_size,
        is_null,
        v);
      i.detailed_message_null = is_null;
      grew = grew || (cap != i.detailed_message_value.capacity ());
    }

    // severity
    //
    {
      ::ebi::vcf::Severity const& v =
        o.severity;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::Severity,
          sqlite::id_integer >::set_image (
        i.severity_value,
        is_null,
        v);
      i.severity_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // typeid_
    //
    if (sk == statement_insert)
    {
      const info_type& di (map->find (typeid (o)));

      bool is_null (false);
      std::size_t cap (i.typeid_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.typeid_value,
        i.typeid_size,
        is_null,
        di.discriminator);
      i.typeid_null = is_null;
      grew = grew || (cap != i.typeid_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // line
    //
    {
      ::size_t& v =
        const_cast< ::size_t& > (
        o.line);

      sqlite::value_traits<
          ::size_t,
          sqlite::id_integer >::set_value (
        v,
        i.line_value,
        i.line_null);
    }

    // message
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.message);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.message_value,
        i.message_size,
        i.message_null);
    }

    // detailed_message
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.detailed_message);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.detailed_message_value,
        i.detailed_message_size,
        i.detailed_message_null);
    }

    // severity
    //
    {
      ::ebi::vcf::Severity& v =
        o.severity;

      sqlite::value_traits<
          ::ebi::vcf::Severity,
          sqlite::id_integer >::set_value (
        v,
        i.severity_value,
        i.severity_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::map_type*
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::map;

  const access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info (
    typeid (::ebi::vcf::Error),
    0,
    0,
    "ebi::vcf::Error",
    &odb::create_impl< ::ebi::vcf::Error >,
    &odb::dispatch_impl< ::ebi::vcf::Error, id_sqlite >,
    0);

  static const access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_Error;

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Error\" "
  "(\"line\", "
  "\"message\", "
  "\"detailed_message\", "
  "\"severity\", "
  "\"id\", "
  "\"typeid\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Error\".\"line\", "
  "\"Error\".\"message\", "
  "\"Error\".\"detailed_message\", "
  "\"Error\".\"severity\", "
  "\"Error\".\"id\", "
  "\"Error\".\"typeid\" "
  "FROM \"Error\" "
  "WHERE \"Error\".\"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  find_discriminator_statement[] =
  "SELECT "
  "\"Error\".\"typeid\" "
  "FROM \"Error\" "
  "WHERE \"Error\".\"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::update_statement[] =
  "UPDATE \"Error\" "
  "SET "
  "\"severity\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Error\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Error\".\"line\", "
  "\"Error\".\"message\", "
  "\"Error\".\"detailed_message\", "
  "\"Error\".\"severity\", "
  "\"Error\".\"id\", "
  "\"Error\".\"typeid\" "
  "FROM \"Error\"";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Error\"";

  const char access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::table_name[] =
  "\"Error\"";

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    if (!top)
    {
      id_image_type& i (sts.id_image ());
      init (i, obj.id_);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (sts.image ());
    }
    else
      root_traits::discriminator_ (sts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    pointer_type p (pi.create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      sts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  discriminator_ (statements_type& sts,
                  const id_type& id,
                  discriminator_type* pd)
  {
    using namespace sqlite;

    id_image_type& idi (sts.discriminator_id_image ());
    init (idi, id);

    binding& idb (sts.discriminator_id_image_binding ());
    if (idi.version != sts.discriminator_id_image_version () ||
        idb.version == 0)
    {
      bind (idb.bind, idi);
      sts.discriminator_id_image_version (idi.version);
      idb.version++;
    }

    discriminator_image_type& i (sts.discriminator_image ());
    binding& imb (sts.discriminator_image_binding ());

    if (i.version != sts.discriminator_image_version () ||
        imb.version == 0)
    {
      sqlite::bind* b (imb.bind);
      std::size_t n (0);
      {
        b[n].type = sqlite::image_traits<
          ::std::string,
          sqlite::id_text>::bind_value;
        b[n].buffer = i.discriminator_value.data ();
        b[n].size = &i.discriminator_size;
        b[n].capacity = i.discriminator_value.capacity ();
        b[n].is_null = &i.discriminator_null;
      }

      sts.discriminator_image_version (i.version);
      imb.version++;
    }

    {
      select_statement& st (sts.find_discriminator_statement ());
      st.execute ();
      auto_result ar (st);
      select_statement::result r (st.fetch ());

      if (r == select_statement::no_data)
      {
        throw object_not_persistent ();
      }
      else if (r == select_statement::truncated)
      {
        bool grew (false);
        bool* t (sts.discriminator_image_truncated ());

        if (t[0UL])
        {
          i.discriminator_value.capacity (i.discriminator_size);
          grew = true;
        }

        if (grew)
          i.version++;

        if (i.version != sts.discriminator_image_version ())
        {
          sqlite::bind* b (imb.bind);
          std::size_t n (0);
          {
            b[n].type = sqlite::image_traits<
              ::std::string,
              sqlite::id_text>::bind_value;
            b[n].buffer = i.discriminator_value.data ();
            b[n].size = &i.discriminator_size;
            b[n].capacity = i.discriminator_value.capacity ();
            b[n].is_null = &i.discriminator_null;
          }

          sts.discriminator_image_version (i.version);
          imb.version++;
          st.refetch ();
        }
      }
    }

    if (pd != 0)
    {
      discriminator_type& d (*pd);
      {
        sqlite::value_traits<
            ::std::string,
            sqlite::id_text >::set_value (
          d,
          i.discriminator_value,
          i.discriminator_size,
          i.discriminator_null);
      }
    }
  }

  result< access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // ErrorCount
  //

  bool access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::std::size_t& v =
        o.count;

      sqlite::value_traits<
          ::std::size_t,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::query_base_type
  access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "COUNT(\"Error\".\"id\") ");

    r += "FROM \"Error\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::view_type >
  access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // MetaSectionError
  //

  struct access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // Error base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 3UL))
        i.base->version++;
    }

    // error_fix
    //
    t[0UL] = false;

    // value
    //
    if (t[1UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    // expected_value
    //
    if (t[2UL])
    {
      i.expected_value_value.capacity (i.expected_value_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // error_fix
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_fix_value;
    b[n].is_null = &i.error_fix_null;
    n++;

    // value
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.value_value.data ();
      b[n].size = &i.value_size;
      b[n].capacity = i.value_value.capacity ();
      b[n].is_null = &i.value_null;
      n++;
    }

    // expected_value
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.expected_value_value.data ();
      b[n].size = &i.expected_value_size;
      b[n].capacity = i.expected_value_value.capacity ();
      b[n].is_null = &i.expected_value_null;
      n++;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Error base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix const& v =
        o.error_fix;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_image (
        i.error_fix_value,
        is_null,
        v);
      i.error_fix_null = is_null;
    }

    // value
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.value;

      bool is_null (false);
      std::size_t cap (i.value_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.value_value,
        i.value_size,
        is_null,
        v);
      i.value_null = is_null;
      grew = grew || (cap != i.value_value.capacity ());
    }

    // expected_value
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.expected_value;

      bool is_null (false);
      std::size_t cap (i.expected_value_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.expected_value_value,
        i.expected_value_size,
        is_null,
        v);
      i.expected_value_null = is_null;
      grew = grew || (cap != i.expected_value_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Error base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix& v =
        o.error_fix;

      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_value (
        v,
        i.error_fix_value,
        i.error_fix_null);
    }

    // value
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.value);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }

    // expected_value
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.expected_value);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.expected_value_value,
        i.expected_value_size,
        i.expected_value_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::info (
    typeid (::ebi::vcf::MetaSectionError),
    &object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info,
    0,
    "ebi::vcf::MetaSectionError",
    &odb::create_impl< ::ebi::vcf::MetaSectionError >,
    &odb::dispatch_impl< ::ebi::vcf::MetaSectionError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_MetaSectionError;

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"MetaSectionError\" "
  "(\"id\", "
  "\"error_fix\", "
  "\"value\", "
  "\"expected_value\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"MetaSectionError\".\"error_fix\", "
    "\"MetaSectionError\".\"value\", "
    "\"MetaSectionError\".\"expected_value\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"MetaSectionError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"MetaSectionError\".\"id\" "
    "WHERE \"MetaSectionError\".\"id\"=?",

    "SELECT "
    "\"MetaSectionError\".\"error_fix\", "
    "\"MetaSectionError\".\"value\", "
    "\"MetaSectionError\".\"expected_value\" "
    "FROM \"MetaSectionError\" "
    "WHERE \"MetaSectionError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::find_column_counts[] =
  {
    9UL,
    3UL
  };

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::update_statement[] =
  "UPDATE \"MetaSectionError\" "
  "SET "
  "\"error_fix\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"MetaSectionError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"MetaSectionError\".\"error_fix\",\n"
  "\"MetaSectionError\".\"value\",\n"
  "\"MetaSectionError\".\"expected_value\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"MetaSectionError\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"MetaSectionError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"MetaSectionError\"";

  const char access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::table_name[] =
  "\"MetaSectionError\"";

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // HeaderSectionError
  //

  struct access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // Error base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Error base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Error base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);
  }

  const access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::info (
    typeid (::ebi::vcf::HeaderSectionError),
    &object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info,
    0,
    "ebi::vcf::HeaderSectionError",
    &odb::create_impl< ::ebi::vcf::HeaderSectionError >,
    &odb::dispatch_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_HeaderSectionError;

  const char access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"HeaderSectionError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"HeaderSectionError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"HeaderSectionError\".\"id\" "
    "WHERE \"HeaderSectionError\".\"id\"=?",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"HeaderSectionError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"HeaderSectionError\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"HeaderSectionError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"HeaderSectionError\"";

  const char access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::table_name[] =
  "\"HeaderSectionError\"";

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 1UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // BodySectionError
  //

  struct access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // Error base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Error base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Error base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);
  }

  const access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info (
    typeid (::ebi::vcf::BodySectionError),
    &object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info,
    0,
    "ebi::vcf::BodySectionError",
    &odb::create_impl< ::ebi::vcf::BodySectionError >,
    &odb::dispatch_impl< ::ebi::vcf::BodySectionError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_BodySectionError;

  const char access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"BodySectionError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"BodySectionError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"BodySectionError\".\"id\" "
    "WHERE \"BodySectionError\".\"id\"=?",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"BodySectionError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"BodySectionError\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"BodySectionError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"BodySectionError\"";

  const char access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::table_name[] =
  "\"BodySectionError\"";

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 1UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // NoMetaDefinitionError
  //

  struct access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // Error base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // Error base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // Error base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db);
  }

  const access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::info (
    typeid (::ebi::vcf::NoMetaDefinitionError),
    &object_traits_impl< ::ebi::vcf::Error, id_sqlite >::info,
    0,
    "ebi::vcf::NoMetaDefinitionError",
    &odb::create_impl< ::ebi::vcf::NoMetaDefinitionError >,
    &odb::dispatch_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_NoMetaDefinitionError;

  const char access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"NoMetaDefinitionError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"NoMetaDefinitionError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"NoMetaDefinitionError\".\"id\" "
    "WHERE \"NoMetaDefinitionError\".\"id\"=?",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"NoMetaDefinitionError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"NoMetaDefinitionError\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"NoMetaDefinitionError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"NoMetaDefinitionError\"";

  const char access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::table_name[] =
  "\"NoMetaDefinitionError\"";

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload);
  }

  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 1UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // FileformatError
  //

  struct access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // MetaSectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // MetaSectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // MetaSectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::info (
    typeid (::ebi::vcf::FileformatError),
    &object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::info,
    0,
    "ebi::vcf::FileformatError",
    &odb::create_impl< ::ebi::vcf::FileformatError >,
    &odb::dispatch_impl< ::ebi::vcf::FileformatError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_FileformatError;

  const char access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"FileformatError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"MetaSectionError\".\"error_fix\", "
    "\"MetaSectionError\".\"value\", "
    "\"MetaSectionError\".\"expected_value\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"FileformatError\" "
    "LEFT JOIN \"MetaSectionError\" ON \"MetaSectionError\".\"id\"=\"FileformatError\".\"id\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FileformatError\".\"id\" "
    "WHERE \"FileformatError\".\"id\"=?",

    "SELECT "
    "\"MetaSectionError\".\"error_fix\", "
    "\"MetaSectionError\".\"value\", "
    "\"MetaSectionError\".\"expected_value\" "
    "FROM \"FileformatError\" "
    "LEFT JOIN \"MetaSectionError\" ON \"MetaSectionError\".\"id\"=\"FileformatError\".\"id\" "
    "WHERE \"FileformatError\".\"id\"=?",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::find_column_counts[] =
  {
    9UL,
    3UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"FileformatError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"MetaSectionError\".\"error_fix\",\n"
  "\"MetaSectionError\".\"value\",\n"
  "\"MetaSectionError\".\"expected_value\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"FileformatError\"\n"
  "LEFT JOIN \"MetaSectionError\" ON \"MetaSectionError\".\"id\"=\"FileformatError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FileformatError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"FileformatError\"";

  const char access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::table_name[] =
  "\"FileformatError\"";

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 1UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // ChromosomeBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::ChromosomeBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::ChromosomeBodyError",
    &odb::create_impl< ::ebi::vcf::ChromosomeBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_ChromosomeBodyError;

  const char access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"ChromosomeBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"ChromosomeBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"ChromosomeBodyError\".\"id\" "
    "WHERE \"ChromosomeBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"ChromosomeBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"ChromosomeBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"ChromosomeBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"ChromosomeBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"ChromosomeBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::table_name[] =
  "\"ChromosomeBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // PositionBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::PositionBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::PositionBodyError",
    &odb::create_impl< ::ebi::vcf::PositionBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::PositionBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_PositionBodyError;

  const char access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"PositionBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"PositionBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"PositionBodyError\".\"id\" "
    "WHERE \"PositionBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"PositionBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"PositionBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"PositionBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"PositionBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"PositionBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::table_name[] =
  "\"PositionBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // IdBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 1UL, d))
        i.base->version++;
    }

    // error_fix
    //
    t[0UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // error_fix
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_fix_value;
    b[n].is_null = &i.error_fix_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix const& v =
        o.error_fix;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_image (
        i.error_fix_value,
        is_null,
        v);
      i.error_fix_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix& v =
        o.error_fix;

      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_value (
        v,
        i.error_fix_value,
        i.error_fix_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::IdBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::IdBodyError",
    &odb::create_impl< ::ebi::vcf::IdBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::IdBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_IdBodyError;

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"IdBodyError\" "
  "(\"id\", "
  "\"error_fix\") "
  "VALUES "
  "(?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"IdBodyError\".\"error_fix\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"IdBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"IdBodyError\".\"id\" "
    "WHERE \"IdBodyError\".\"id\"=?",

    "SELECT "
    "\"IdBodyError\".\"error_fix\" "
    "FROM \"IdBodyError\" "
    "WHERE \"IdBodyError\".\"id\"=?",

    "SELECT "
    "\"IdBodyError\".\"error_fix\" "
    "FROM \"IdBodyError\" "
    "WHERE \"IdBodyError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::find_column_counts[] =
  {
    7UL,
    1UL,
    1UL
  };

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::update_statement[] =
  "UPDATE \"IdBodyError\" "
  "SET "
  "\"error_fix\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"IdBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"IdBodyError\".\"error_fix\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"IdBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"IdBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"IdBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"IdBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::table_name[] =
  "\"IdBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // ReferenceAlleleBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::ReferenceAlleleBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::ReferenceAlleleBodyError",
    &odb::create_impl< ::ebi::vcf::ReferenceAlleleBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_ReferenceAlleleBodyError;

  const char access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"ReferenceAlleleBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"ReferenceAlleleBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"ReferenceAlleleBodyError\".\"id\" "
    "WHERE \"ReferenceAlleleBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"ReferenceAlleleBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"ReferenceAlleleBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"ReferenceAlleleBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"ReferenceAlleleBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"ReferenceAlleleBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::table_name[] =
  "\"ReferenceAlleleBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // AlternateAllelesBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::AlternateAllelesBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::AlternateAllelesBodyError",
    &odb::create_impl< ::ebi::vcf::AlternateAllelesBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_AlternateAllelesBodyError;

  const char access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"AlternateAllelesBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"AlternateAllelesBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"AlternateAllelesBodyError\".\"id\" "
    "WHERE \"AlternateAllelesBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"AlternateAllelesBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"AlternateAllelesBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"AlternateAllelesBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"AlternateAllelesBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"AlternateAllelesBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::table_name[] =
  "\"AlternateAllelesBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // QualityBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::QualityBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::QualityBodyError",
    &odb::create_impl< ::ebi::vcf::QualityBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::QualityBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_QualityBodyError;

  const char access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"QualityBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"QualityBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"QualityBodyError\".\"id\" "
    "WHERE \"QualityBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"QualityBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"QualityBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"QualityBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"QualityBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"QualityBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::table_name[] =
  "\"QualityBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // FilterBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 2UL, d))
        i.base->version++;
    }

    // error_fix
    //
    t[0UL] = false;

    // field
    //
    if (t[1UL])
    {
      i.field_value.capacity (i.field_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // error_fix
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_fix_value;
    b[n].is_null = &i.error_fix_null;
    n++;

    // field
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.field_value.data ();
      b[n].size = &i.field_size;
      b[n].capacity = i.field_value.capacity ();
      b[n].is_null = &i.field_null;
      n++;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix const& v =
        o.error_fix;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_image (
        i.error_fix_value,
        is_null,
        v);
      i.error_fix_null = is_null;
    }

    // field
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.field;

      bool is_null (false);
      std::size_t cap (i.field_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.field_value,
        i.field_size,
        is_null,
        v);
      i.field_null = is_null;
      grew = grew || (cap != i.field_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix& v =
        o.error_fix;

      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_value (
        v,
        i.error_fix_value,
        i.error_fix_null);
    }

    // field
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.field);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.field_value,
        i.field_size,
        i.field_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::FilterBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::FilterBodyError",
    &odb::create_impl< ::ebi::vcf::FilterBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::FilterBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_FilterBodyError;

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"FilterBodyError\" "
  "(\"id\", "
  "\"error_fix\", "
  "\"field\") "
  "VALUES "
  "(?, ?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"FilterBodyError\".\"error_fix\", "
    "\"FilterBodyError\".\"field\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"FilterBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FilterBodyError\".\"id\" "
    "WHERE \"FilterBodyError\".\"id\"=?",

    "SELECT "
    "\"FilterBodyError\".\"error_fix\", "
    "\"FilterBodyError\".\"field\" "
    "FROM \"FilterBodyError\" "
    "WHERE \"FilterBodyError\".\"id\"=?",

    "SELECT "
    "\"FilterBodyError\".\"error_fix\", "
    "\"FilterBodyError\".\"field\" "
    "FROM \"FilterBodyError\" "
    "WHERE \"FilterBodyError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::find_column_counts[] =
  {
    8UL,
    2UL,
    2UL
  };

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::update_statement[] =
  "UPDATE \"FilterBodyError\" "
  "SET "
  "\"error_fix\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"FilterBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"FilterBodyError\".\"error_fix\",\n"
  "\"FilterBodyError\".\"field\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"FilterBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"FilterBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FilterBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"FilterBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::table_name[] =
  "\"FilterBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // InfoBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 3UL, d))
        i.base->version++;
    }

    // error_fix
    //
    t[0UL] = false;

    // field
    //
    if (t[1UL])
    {
      i.field_value.capacity (i.field_size);
      grew = true;
    }

    // expected_value
    //
    if (t[2UL])
    {
      i.expected_value_value.capacity (i.expected_value_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // error_fix
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_fix_value;
    b[n].is_null = &i.error_fix_null;
    n++;

    // field
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.field_value.data ();
      b[n].size = &i.field_size;
      b[n].capacity = i.field_value.capacity ();
      b[n].is_null = &i.field_null;
      n++;
    }

    // expected_value
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.expected_value_value.data ();
      b[n].size = &i.expected_value_size;
      b[n].capacity = i.expected_value_value.capacity ();
      b[n].is_null = &i.expected_value_null;
      n++;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix const& v =
        o.error_fix;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_image (
        i.error_fix_value,
        is_null,
        v);
      i.error_fix_null = is_null;
    }

    // field
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.field;

      bool is_null (false);
      std::size_t cap (i.field_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.field_value,
        i.field_size,
        is_null,
        v);
      i.field_null = is_null;
      grew = grew || (cap != i.field_value.capacity ());
    }

    // expected_value
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.expected_value;

      bool is_null (false);
      std::size_t cap (i.expected_value_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.expected_value_value,
        i.expected_value_size,
        is_null,
        v);
      i.expected_value_null = is_null;
      grew = grew || (cap != i.expected_value_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix& v =
        o.error_fix;

      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_value (
        v,
        i.error_fix_value,
        i.error_fix_null);
    }

    // field
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.field);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.field_value,
        i.field_size,
        i.field_null);
    }

    // expected_value
    //
    {
      ::std::string& v =
        const_cast< ::std::string& > (
        o.expected_value);

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.expected_value_value,
        i.expected_value_size,
        i.expected_value_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::InfoBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::InfoBodyError",
    &odb::create_impl< ::ebi::vcf::InfoBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::InfoBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_InfoBodyError;

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"InfoBodyError\" "
  "(\"id\", "
  "\"error_fix\", "
  "\"field\", "
  "\"expected_value\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"InfoBodyError\".\"error_fix\", "
    "\"InfoBodyError\".\"field\", "
    "\"InfoBodyError\".\"expected_value\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"InfoBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"InfoBodyError\".\"id\" "
    "WHERE \"InfoBodyError\".\"id\"=?",

    "SELECT "
    "\"InfoBodyError\".\"error_fix\", "
    "\"InfoBodyError\".\"field\", "
    "\"InfoBodyError\".\"expected_value\" "
    "FROM \"InfoBodyError\" "
    "WHERE \"InfoBodyError\".\"id\"=?",

    "SELECT "
    "\"InfoBodyError\".\"error_fix\", "
    "\"InfoBodyError\".\"field\", "
    "\"InfoBodyError\".\"expected_value\" "
    "FROM \"InfoBodyError\" "
    "WHERE \"InfoBodyError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::find_column_counts[] =
  {
    9UL,
    3UL,
    3UL
  };

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::update_statement[] =
  "UPDATE \"InfoBodyError\" "
  "SET "
  "\"error_fix\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"InfoBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"InfoBodyError\".\"error_fix\",\n"
  "\"InfoBodyError\".\"field\",\n"
  "\"InfoBodyError\".\"expected_value\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"InfoBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"InfoBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"InfoBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"InfoBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::table_name[] =
  "\"InfoBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // FormatBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 1UL, d))
        i.base->version++;
    }

    // error_fix
    //
    t[0UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // error_fix
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.error_fix_value;
    b[n].is_null = &i.error_fix_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix const& v =
        o.error_fix;

      bool is_null (false);
      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_image (
        i.error_fix_value,
        is_null,
        v);
      i.error_fix_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);

    // error_fix
    //
    {
      ::ebi::vcf::ErrorFix& v =
        o.error_fix;

      sqlite::value_traits<
          ::ebi::vcf::ErrorFix,
          sqlite::id_integer >::set_value (
        v,
        i.error_fix_value,
        i.error_fix_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::FormatBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::FormatBodyError",
    &odb::create_impl< ::ebi::vcf::FormatBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::FormatBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_FormatBodyError;

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"FormatBodyError\" "
  "(\"id\", "
  "\"error_fix\") "
  "VALUES "
  "(?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"FormatBodyError\".\"error_fix\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"FormatBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FormatBodyError\".\"id\" "
    "WHERE \"FormatBodyError\".\"id\"=?",

    "SELECT "
    "\"FormatBodyError\".\"error_fix\" "
    "FROM \"FormatBodyError\" "
    "WHERE \"FormatBodyError\".\"id\"=?",

    "SELECT "
    "\"FormatBodyError\".\"error_fix\" "
    "FROM \"FormatBodyError\" "
    "WHERE \"FormatBodyError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::find_column_counts[] =
  {
    7UL,
    1UL,
    1UL
  };

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::update_statement[] =
  "UPDATE \"FormatBodyError\" "
  "SET "
  "\"error_fix\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"FormatBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"FormatBodyError\".\"error_fix\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"FormatBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"FormatBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"FormatBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"FormatBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::table_name[] =
  "\"FormatBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // SamplesBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::SamplesBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::SamplesBodyError",
    &odb::create_impl< ::ebi::vcf::SamplesBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_SamplesBodyError;

  const char access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"SamplesBodyError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"SamplesBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"SamplesBodyError\".\"id\" "
    "WHERE \"SamplesBodyError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"SamplesBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"SamplesBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"SamplesBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"SamplesBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"SamplesBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::table_name[] =
  "\"SamplesBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // SamplesFieldBodyError
  //

  struct access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 2UL, d))
        i.base->version++;
    }

    // field
    //
    if (t[0UL])
    {
      i.field_value.capacity (i.field_size);
      grew = true;
    }

    // field_cardinality
    //
    t[1UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // field
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.field_value.data ();
    b[n].size = &i.field_size;
    b[n].capacity = i.field_value.capacity ();
    b[n].is_null = &i.field_null;
    n++;

    // field_cardinality
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.field_cardinality_value;
    b[n].is_null = &i.field_cardinality_null;
    n++;

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // field
    //
    {
      ::std::string const& v =
        o.field;

      bool is_null (false);
      std::size_t cap (i.field_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.field_value,
        i.field_size,
        is_null,
        v);
      i.field_null = is_null;
      grew = grew || (cap != i.field_value.capacity ());
    }

    // field_cardinality
    //
    {
      long int const& v =
        o.field_cardinality;

      bool is_null (false);
      sqlite::value_traits<
          long int,
          sqlite::id_integer >::set_image (
        i.field_cardinality_value,
        is_null,
        v);
      i.field_cardinality_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);

    // field
    //
    {
      ::std::string& v =
        o.field;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.field_value,
        i.field_size,
        i.field_null);
    }

    // field_cardinality
    //
    {
      long int& v =
        o.field_cardinality;

      sqlite::value_traits<
          long int,
          sqlite::id_integer >::set_value (
        v,
        i.field_cardinality_value,
        i.field_cardinality_null);
    }
  }

  const access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::info (
    typeid (::ebi::vcf::SamplesFieldBodyError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::SamplesFieldBodyError",
    &odb::create_impl< ::ebi::vcf::SamplesFieldBodyError >,
    &odb::dispatch_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_SamplesFieldBodyError;

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"SamplesFieldBodyError\" "
  "(\"id\", "
  "\"field\", "
  "\"field_cardinality\") "
  "VALUES "
  "(?, ?, ?)";

  const char* const access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"SamplesFieldBodyError\".\"field\", "
    "\"SamplesFieldBodyError\".\"field_cardinality\", "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"SamplesFieldBodyError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"SamplesFieldBodyError\".\"id\" "
    "WHERE \"SamplesFieldBodyError\".\"id\"=?",

    "SELECT "
    "\"SamplesFieldBodyError\".\"field\", "
    "\"SamplesFieldBodyError\".\"field_cardinality\" "
    "FROM \"SamplesFieldBodyError\" "
    "WHERE \"SamplesFieldBodyError\".\"id\"=?",

    "SELECT "
    "\"SamplesFieldBodyError\".\"field\", "
    "\"SamplesFieldBodyError\".\"field_cardinality\" "
    "FROM \"SamplesFieldBodyError\" "
    "WHERE \"SamplesFieldBodyError\".\"id\"=?"
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::find_column_counts[] =
  {
    8UL,
    2UL,
    2UL
  };

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::update_statement[] =
  "UPDATE \"SamplesFieldBodyError\" "
  "SET "
  "\"field\"=?, "
  "\"field_cardinality\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"SamplesFieldBodyError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"SamplesFieldBodyError\".\"field\",\n"
  "\"SamplesFieldBodyError\".\"field_cardinality\",\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"SamplesFieldBodyError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"SamplesFieldBodyError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"SamplesFieldBodyError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"SamplesFieldBodyError\"";

  const char access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::table_name[] =
  "\"SamplesFieldBodyError\"";

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    base_traits::update (db, obj, false, false);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    const binding& idb (sts.id_image_binding ());
    binding& imb (sts.update_image_binding ());
    if (idb.version != sts.update_id_binding_version () ||
        im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_update);
      sts.update_id_binding_version (idb.version);
      sts.update_image_version (im.version);
      imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (!find_ (sts, 0, d))
      throw object_not_persistent ();

    select_statement& st (sts.find_statement (d));
    ODB_POTENTIALLY_UNUSED (st);

    init (obj, sts.image (), &db, d);
    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // NormalizationError
  //

  struct access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::info (
    typeid (::ebi::vcf::NormalizationError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::NormalizationError",
    &odb::create_impl< ::ebi::vcf::NormalizationError >,
    &odb::dispatch_impl< ::ebi::vcf::NormalizationError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_NormalizationError;

  const char access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"NormalizationError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"NormalizationError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"NormalizationError\".\"id\" "
    "WHERE \"NormalizationError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"NormalizationError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"NormalizationError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"NormalizationError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"NormalizationError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"NormalizationError\"";

  const char access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::table_name[] =
  "\"NormalizationError\"";

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // DuplicationError
  //

  struct access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  grow (image_type& i,
        bool* t,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // BodySectionError base
    //
    if (--d != 0)
    {
      if (base_traits::grow (*i.base, t + 0UL, d))
        i.base->version++;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk == statement_insert)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // id_
    //
    if (sk == statement_update)
    {
      if (id != 0)
        std::memcpy (&b[n], id, id_size * sizeof (id[0]));
      n += id_size;
    }

    // BodySectionError base
    //
    if (sk == statement_select)
      base_traits::bind (b + n, id, id_size, *i.base, sk);
  }

  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db,
        std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BodySectionError base
    //
    if (--d != 0)
      base_traits::init (o, *i.base, db, d);
  }

  const access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::info_type
  access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::info (
    typeid (::ebi::vcf::DuplicationError),
    &object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::info,
    0,
    "ebi::vcf::DuplicationError",
    &odb::create_impl< ::ebi::vcf::DuplicationError >,
    &odb::dispatch_impl< ::ebi::vcf::DuplicationError, id_sqlite >,
    &statements_type::delayed_loader);

  static const access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::entry_type
  polymorphic_entry_for_ebi_vcf_DuplicationError;

  const char access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::persist_statement[] =
  "INSERT INTO \"DuplicationError\" "
  "(\"id\") "
  "VALUES "
  "(?)";

  const char* const access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::find_statements[] =
  {
    "SELECT "
    "\"Error\".\"line\", "
    "\"Error\".\"message\", "
    "\"Error\".\"detailed_message\", "
    "\"Error\".\"severity\", "
    "\"Error\".\"id\", "
    "\"Error\".\"typeid\" "
    "FROM \"DuplicationError\" "
    "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"DuplicationError\".\"id\" "
    "WHERE \"DuplicationError\".\"id\"=?",

    "",

    ""
  };

  const std::size_t access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::find_column_counts[] =
  {
    6UL,
    0UL,
    0UL
  };

  const char access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::erase_statement[] =
  "DELETE FROM \"DuplicationError\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Error\".\"line\",\n"
  "\"Error\".\"message\",\n"
  "\"Error\".\"detailed_message\",\n"
  "\"Error\".\"severity\",\n"
  "\"Error\".\"id\",\n"
  "\"Error\".\"typeid\"\n"
  "FROM \"DuplicationError\"\n"
  "LEFT JOIN \"BodySectionError\" ON \"BodySectionError\".\"id\"=\"DuplicationError\".\"id\"\n"
  "LEFT JOIN \"Error\" ON \"Error\".\"id\"=\"DuplicationError\".\"id\"";

  const char access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"DuplicationError\"";

  const char access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::table_name[] =
  "\"DuplicationError\"";

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  persist (database& db, object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_persist, db, &obj, 0);
        return;
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::pre_persist);

    base_traits::persist (db, obj, false, false);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());
    const binding& idb (sts.id_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (idb.version != sts.insert_id_binding_version () ||
        im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, idb.bind, idb.count, im, statement_insert);
      sts.insert_id_binding_version (idb.version);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    if (top)
      callback (db,
                static_cast<const object_type&> (obj),
                callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  update (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    using namespace sqlite;
    using sqlite::update_statement;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_update, db, &obj, 0);
        return;
      }
    }

    if (top)
      callback (db, obj, callback_event::pre_update);

    base_traits::update (db, obj, false, false);

    if (top)
    {
      callback (db, obj, callback_event::post_update);
      pointer_cache_traits::update (db, obj);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  erase (database& db, const id_type& id, bool top, bool dyn)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    if (dyn)
    {
      discriminator_type d;
      root_traits::discriminator_ (sts.root_statements (), id, &d);

      if (d != info.discriminator)
      {
        const info_type& pi (root_traits::map->find (d));

        if (!pi.derived (info))
          throw object_not_persistent ();

        pi.dispatch (info_type::call_erase, db, 0, &id);
        return;
      }
    }

    if (top)
    {
      id_image_type& i (sts.id_image ());
      init (i, id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    base_traits::erase (db, id, false, false);

    if (top)
      pointer_cache_traits::erase (db, id);
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  erase (database& db, const object_type& obj, bool top, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (top);

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        pi.dispatch (info_type::call_erase, db, &obj, 0);
        return;
      }
    }

    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj), true, false);
    callback (db, obj, callback_event::post_erase);
  }

  access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      root_traits::pointer_type rp (pointer_cache_traits::find (db, id));

      if (!root_traits::pointer_traits::null_ptr (rp))
        return
          root_traits::pointer_traits::dynamic_pointer_cast<object_type> (rp);
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);
    root_traits::discriminator_type d;

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
      d = root_traits::discriminator (rsts.image ());
    }
    else
      root_traits::discriminator_ (rsts, id, &d);

    const info_type& pi (
      d == info.discriminator ? info : root_traits::map->find (d));

    root_traits::pointer_type rp (pi.create ());
    pointer_type p (
      root_traits::pointer_traits::static_pointer_cast<object_type> (rp));
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, rp));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement (depth));
      ODB_POTENTIALLY_UNUSED (st);

      callback_event ce (callback_event::pre_load);
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);

      if (&pi != &info)
      {
        std::size_t d (depth);
        pi.dispatch (info_type::call_load, db, &obj, &d);
      }

      rsts.load_delayed (0);
      l.unlock ();
      ce = callback_event::post_load;
      pi.dispatch (info_type::call_callback, db, &obj, &ce);
      pointer_cache_traits::load (ig.position ());
    }
    else
      rsts.delay_load (id, obj, ig.position (), pi.delayed_loader);

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_find, db, &obj, &id);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  reload (database& db, object_type& obj, bool dyn)
  {
    ODB_POTENTIALLY_UNUSED (dyn);

    using namespace sqlite;

    if (dyn)
    {
      const std::type_info& t (typeid (obj));

      if (t != info.type)
      {
        const info_type& pi (root_traits::map->find (t));
        return pi.dispatch (info_type::call_reload, db, &obj, 0);
      }
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());
    root_statements_type& rsts (sts.root_statements ());

    statements_type::auto_lock l (rsts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement (depth));
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    rsts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id,
         std::size_t d)
  {
    using namespace sqlite;

    if (d == depth)
    {
      id_image_type& i (sts.id_image ());
      init (i, *id);

      binding& idb (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (d));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    select_statement& st (sts.find_statement (d));

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated (), d))
        im.version++;

      if (check_version (sts.select_image_versions (), im))
      {
        bind (imb.bind, 0, 0, im, statement_select);
        update_version (sts.select_image_versions (),
                        im,
                        sts.select_image_bindings ());
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload,
         std::size_t d)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    if (--d != 0)
      base_traits::load_ (sts.base_statements (), obj, reload, d);
  }

  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  load_ (database& db, root_type& r, std::size_t d)
  {
    using namespace sqlite;

    object_type& obj (static_cast<object_type&> (r));
    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    d = depth - d;

    if (d > 2UL)
    {
      if (!find_ (sts, 0, d))
        throw object_not_persistent ();

      select_statement& st (sts.find_statement (d));
      ODB_POTENTIALLY_UNUSED (st);

      init (obj, sts.image (), &db, d);
    }

    load_ (sts, obj, false, d);
  }

  result< access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding (depth));

    if (imb.version == 0 ||
        check_version (sts.select_image_versions (), im))
    {
      bind (imb.bind, 0, 0, im, statement_select);
      update_version (sts.select_image_versions (),
                      im,
                      sts.select_image_bindings ());
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::polymorphic_object_result_impl<object_type> > r (
      new (shared) sqlite::polymorphic_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MatchStats
  //

  struct access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::id_type
  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::id_type
  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // num_matches
    //
    t[0UL] = false;

    // num_variants
    //
    t[1UL] = false;

    // id_
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // num_matches
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.num_matches_value;
    b[n].is_null = &i.num_matches_null;
    n++;

    // num_variants
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.num_variants_value;
    b[n].is_null = &i.num_variants_null;
    n++;

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // num_matches
    //
    {
      int const& v =
        o.num_matches;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.num_matches_value,
        is_null,
        v);
      i.num_matches_null = is_null;
    }

    // num_variants
    //
    {
      int const& v =
        o.num_variants;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.num_variants_value,
        is_null,
        v);
      i.num_variants_null = is_null;
    }

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // num_matches
    //
    {
      int& v =
        o.num_matches;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.num_matches_value,
        i.num_matches_null);
    }

    // num_variants
    //
    {
      int& v =
        o.num_variants;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.num_variants_value,
        i.num_variants_null);
    }

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::persist_statement[] =
  "INSERT INTO \"MatchStats\" "
  "(\"num_matches\", "
  "\"num_variants\", "
  "\"id\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::find_statement[] =
  "SELECT "
  "\"MatchStats\".\"num_matches\", "
  "\"MatchStats\".\"num_variants\", "
  "\"MatchStats\".\"id\" "
  "FROM \"MatchStats\" "
  "WHERE \"MatchStats\".\"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::update_statement[] =
  "UPDATE \"MatchStats\" "
  "SET "
  "\"num_matches\"=?, "
  "\"num_variants\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::erase_statement[] =
  "DELETE FROM \"MatchStats\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::query_statement[] =
  "SELECT "
  "\"MatchStats\".\"num_matches\", "
  "\"MatchStats\".\"num_variants\", "
  "\"MatchStats\".\"id\" "
  "FROM \"MatchStats\"";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"MatchStats\"";

  const char access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::table_name[] =
  "\"MatchStats\"";

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::pointer_type
  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::object_type >
  access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MatchStatsCount
  //

  bool access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::std::size_t& v =
        o.count;

      sqlite::value_traits<
          ::std::size_t,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::query_base_type
  access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "COUNT(\"MatchStats\".\"id\") ");

    r += "FROM \"MatchStats\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::view_type >
  access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"MatchStats\"");
          db.execute ("DROP TABLE IF EXISTS \"DuplicationError\"");
          db.execute ("DROP TABLE IF EXISTS \"NormalizationError\"");
          db.execute ("DROP TABLE IF EXISTS \"SamplesFieldBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"SamplesBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"FormatBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"InfoBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"FilterBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"QualityBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"AlternateAllelesBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"ReferenceAlleleBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"IdBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"PositionBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"ChromosomeBodyError\"");
          db.execute ("DROP TABLE IF EXISTS \"FileformatError\"");
          db.execute ("DROP TABLE IF EXISTS \"NoMetaDefinitionError\"");
          db.execute ("DROP TABLE IF EXISTS \"BodySectionError\"");
          db.execute ("DROP TABLE IF EXISTS \"HeaderSectionError\"");
          db.execute ("DROP TABLE IF EXISTS \"MetaSectionError\"");
          db.execute ("DROP TABLE IF EXISTS \"Error\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Error\" (\n"
                      "  \"line\" INTEGER NOT NULL,\n"
                      "  \"message\" TEXT NOT NULL,\n"
                      "  \"detailed_message\" TEXT NOT NULL,\n"
                      "  \"severity\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"typeid\" TEXT NOT NULL)");
          db.execute ("CREATE TABLE \"MetaSectionError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"error_fix\" INTEGER NOT NULL,\n"
                      "  \"value\" TEXT NOT NULL,\n"
                      "  \"expected_value\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"Error\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"HeaderSectionError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"Error\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"BodySectionError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"Error\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"NoMetaDefinitionError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"Error\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"FileformatError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"MetaSectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"ChromosomeBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"PositionBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"IdBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"error_fix\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"ReferenceAlleleBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"AlternateAllelesBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"QualityBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"FilterBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"error_fix\" INTEGER NOT NULL,\n"
                      "  \"field\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"InfoBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"error_fix\" INTEGER NOT NULL,\n"
                      "  \"field\" TEXT NOT NULL,\n"
                      "  \"expected_value\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"FormatBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"error_fix\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"SamplesBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"SamplesFieldBodyError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"field\" TEXT NOT NULL,\n"
                      "  \"field_cardinality\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"NormalizationError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"DuplicationError\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  CONSTRAINT \"id_fk\"\n"
                      "    FOREIGN KEY (\"id\")\n"
                      "    REFERENCES \"BodySectionError\" (\"id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE TABLE \"MatchStats\" (\n"
                      "  \"num_matches\" INTEGER NOT NULL,\n"
                      "  \"num_variants\" INTEGER NOT NULL,\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_sqlite,
    "",
    &create_schema);
}

#include <odb/post.hxx>
