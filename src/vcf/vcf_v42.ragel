/**
 * Copyright 2014-2016 EMBL - European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdio>

#include "vcf/validator.hpp"

%%{
    machine vcf_v42;

    #############################################
    #             Actions definition            #
    #############################################


    ############## General actions ##############
    
    action token_begin {
        ParsePolicy::handle_token_begin(*this);
    }

    action token_middle {
        ParsePolicy::handle_token_char(*this, *p);
    }
    
    action token_end {
        ParsePolicy::handle_token_end(*this);
    }

    action line_break {
        ParsePolicy::handle_newline(*this);
        ++n_lines;
        n_columns = 1;

        if (n_lines % 10000 == 0) {
            std::cout << "Lines read: " << n_lines << std::endl;
        }
    }

    action tab_break {
        ++n_columns;
    }

    
    ######### Global section actions #########

    action fileformat_section_error {
        ErrorPolicy::handle_error(*this, new FileformatError{n_lines});
        fhold; fgoto meta_section_skip;
    }

    action meta_section_error {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_section_end {
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (Error *warn) {
          ErrorPolicy::handle_warning(*this, warn);
        }
    }

    action header_section_error {
        ErrorPolicy::handle_error(*this, new HeaderSectionError{n_lines});
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (Error *warn) {
          ErrorPolicy::handle_warning(*this, warn);
        }
        
        fhold; fgoto body_section_skip;
    }

    action body_section_error {
        ErrorPolicy::handle_error(*this, new BodySectionError{n_lines});
        fhold; fgoto body_section_skip;
    }

    
    ########### Correct meta actions ##########

    action fileformat_end {
        try {
          ParsePolicy::handle_fileformat(*this);
        } catch (Error *error) {
          ErrorPolicy::handle_error(*this, error);
          fhold; fgoto meta_section_skip;
        }
    }

    action meta_typeid_alt {
        ParsePolicy::handle_meta_typeid(*this, "ALT");
    }

    action meta_typeid_assembly {
        ParsePolicy::handle_meta_typeid(*this, "assembly");
    }

    action meta_typeid_contig {
        ParsePolicy::handle_meta_typeid(*this, "contig");
    }

    action meta_typeid_filter {
        ParsePolicy::handle_meta_typeid(*this, "FILTER");
    }

    action meta_typeid_format {
        ParsePolicy::handle_meta_typeid(*this, "FORMAT");
    }

    action meta_typeid_info {
        ParsePolicy::handle_meta_typeid(*this, "INFO");
    }

    action meta_typeid_pedigree {
        ParsePolicy::handle_meta_typeid(*this, "PEDIGREE");
    }

    action meta_typeid_pedigreedb {
        ParsePolicy::handle_meta_typeid(*this, "pedigreeDB");
    }

    action meta_typeid_sample {
        ParsePolicy::handle_meta_typeid(*this, "SAMPLE");
    }

    action meta_id {
        ParsePolicy::handle_token_end(*this, "ID");
    }
    
    action meta_number {
        ParsePolicy::handle_token_end(*this, "Number");
    }
    
    action meta_type {
        ParsePolicy::handle_token_end(*this, "Type");
    }
    
    action meta_description {
        ParsePolicy::handle_token_end(*this, "Description");
    }
    
    action meta_genomes {
        ParsePolicy::handle_token_end(*this, "Genomes");
    }
    
    action meta_mixture {
        ParsePolicy::handle_token_end(*this, "Mixture");
    }
    
    action meta_typeid_generic {
        ParsePolicy::handle_meta_typeid(*this);
    }
    
    action meta_key_generic {
        ParsePolicy::handle_token_end(*this);
    }
    
    action meta_entry_end {
        try {
          ParsePolicy::handle_meta_line(*this);
        } catch (Error *error) {
          ErrorPolicy::handle_error(*this, error);
        }
    }

    action sample_name_end {
        ParsePolicy::handle_sample_name(*this);
    }
    
    action header_end {
        ParsePolicy::handle_header_line(*this);
    }

    ########### Correct body actions ##########

    action record_field_end {
        ParsePolicy::handle_column_end(*this, n_columns);
    }
    
    action record_end {
        try {
            // Handle all columns and build record
            ParsePolicy::handle_body_line(*this);

            if (record != nullptr) {
                auto duplicated_errors = previous_records.check_duplicates(*record);
                for(auto &error_ptr : duplicated_errors) {
                    ErrorPolicy::handle_error(*this, error_ptr.release());
                }
            }

            try {
                // Check warnings (non-blocking errors but potential mistakes anyway, only makes sense if the last record parsed was correct)
                if (record != nullptr) {
                    OptionalPolicy::optional_check_body_entry(*this, *record);
                }
            } catch (Error *warn) {
                ErrorPolicy::handle_warning(*this, warn);
            }
        } catch (Error *error) {
            ErrorPolicy::handle_error(*this, error);
        }
    }


    ########## Incorrect metadata and header actions ##########

    # Fileformat line
    action fileformat_error {
        ErrorPolicy::handle_error(*this,
            new FileformatError{n_lines, "The fileformat declaration is not 'fileformat=VCFv4.2'"});
        fhold; fgoto meta_section_skip;
    } 

    # ALT metadata
    action meta_alt_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in ALT metadata"});
        fhold; fgoto meta_section_skip;
    }

    action meta_alt_id_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines,
            "ALT metadata ID is not prefixed by DEL/INS/DUP/INV/CNV and suffixed by ':' and a text sequence"});
        fhold; fgoto meta_section_skip;
    }
    
    # assembly metadata
    action meta_assembly_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in assembly metadata"});
        fhold; fgoto meta_section_skip;
    }
    
    # contig metadata
    action meta_contig_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in contig metadata"});
        fhold; fgoto meta_section_skip;
    }
    
    # FILTER metadata
    action meta_filter_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in FILTER metadata"});
        fhold; fgoto meta_section_skip;
    }

    # FORMAT metadata
    action meta_format_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in FORMAT metadata"});
        fhold; fgoto meta_section_skip;
    }

    action meta_format_number_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "FORMAT metadata Number is not a number, A, R, G or dot"});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_format_type_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "FORMAT metadata Type is not a Integer, Float, Character or String"});
        fhold; fgoto meta_section_skip;
    }

    # INFO metadata
    action meta_info_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in INFO metadata"});
        fhold; fgoto meta_section_skip;
    }

    action meta_info_number_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "INFO metadata Number is not a number, A, R, G or dot"});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_info_type_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "INFO metadata Type is not a Integer, Float, Flag, Character or String"});
        fhold; fgoto meta_section_skip;
    }

    # PEDIGREE metadata
    action meta_pedigree_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in PEDIGREE metadata"});
        fhold; fgoto meta_section_skip;
    }
    
    # pedigreeDB metadata
    action meta_pedigreedb_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in pedigreeDB metadata"});
        fhold; fgoto meta_section_skip;
    }
    
    # SAMPLE metadata
    action meta_sample_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Error in SAMPLE metadata"});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_sample_genomes_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "SAMPLE metadata Genomes is not a valid string (maybe it contains quotes?)"});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_sample_mixture_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "SAMPLE metadata Mixture is not a valid string (maybe it contains quotes?)"});
        fhold; fgoto meta_section_skip;
    }
    
    # Metadata generic errors (do not apply to a specific type)
    action meta_id_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Metadata ID contains a character different from alphanumeric, dot, underscore and dash"});
        fhold; fgoto meta_section_skip;
    }
    
    action meta_desc_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Metadata description string is not valid"});
        fhold; fgoto meta_section_skip;
    }

    action meta_url_err {
        ErrorPolicy::handle_error(*this, new MetaSectionError{n_lines, "Metadata URL is not valid"});
        fhold; fgoto meta_section_skip;
    }
    
    # Header errors
    action header_prefix_err {
        ErrorPolicy::handle_error(*this, new HeaderSectionError{n_lines,
            "The header line does not start with the mandatory columns: CHROM, POS, ID, REF, ALT, QUAL, FILTER and INFO"});
        
        // If an error occurs in the header, meta_section_end won't be triggered and the meta and header optional validations must be run here
        try {
          OptionalPolicy::optional_check_meta_section(*this);
        } catch (Error *warn) {
          ErrorPolicy::handle_warning(*this, warn);
        }
        
        fhold; fgoto body_section_skip;
    }
    
    ########## Incorrect records actions ##########

    # Chromosome
    action chrom_error {
        ErrorPolicy::handle_error(*this, new ChromosomeBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Position
    action pos_error {
        ErrorPolicy::handle_error(*this, new PositionBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # ID
    action id_error {
        ErrorPolicy::handle_error(*this, new IdBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Reference allele
    action ref_error {
        ErrorPolicy::handle_error(*this, new ReferenceAlleleBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Alternate alleles
    action alt_error {
        ErrorPolicy::handle_error(*this, new AlternateAllelesBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Quality
    action qual_error {
        ErrorPolicy::handle_error(*this, new QualityBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Filter
    action filter_error {
        ErrorPolicy::handle_error(*this, new FilterBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Info
    action info_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{n_lines, "Info is not a single dot or a semicolon-separated list of key-value pairs"});
        fhold; fgoto body_section_skip;
    }

    action info_key_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{n_lines, "Info key is not a sequence of alphanumeric and/or punctuation characters"});
        fhold; fgoto body_section_skip;
    }
    
    action info_value_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{n_lines, "Info field value is not a comma-separated list of valid strings (maybe it contains whitespaces?)"});
        fhold; fgoto body_section_skip;
    }
    
    action info_AA_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info AA value is not a single dot or a string of bases",
                "AA"});
        fhold; fgoto body_section_skip;
    }
    
    action info_AC_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info AC value is not a comma-separated list of numbers",
                "AC"});
        fhold; fgoto body_section_skip;
    }
    
    action info_AF_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info AF value is not a comma-separated list of numbers",
                "AF"});
        fhold; fgoto body_section_skip;
    }
    
    action info_AN_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info AN value is not an integer number",
                "AN"});
        fhold; fgoto body_section_skip;
    }
    
    action info_BQ_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info BQ value is not a number",
                "BQ"});
        fhold; fgoto body_section_skip;
    }
    
    action info_CIGAR_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info CIGAR value is not an alphanumeric string compliant with the SAM specification",
                "CIGAR"});
        fhold; fgoto body_section_skip;
    }
    
    action info_DB_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info DB is not a flag (with 1/0/no value)",
                "DB"});
        fhold; fgoto body_section_skip;
    }
    
    action info_DP_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info DP value is not an integer number",
                "DP"});
        fhold; fgoto body_section_skip;
    }
    
    action info_END_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info END value is not an integer number",
                "END"});
        fhold; fgoto body_section_skip;
    }
    
    action info_H2_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info H2 is not a flag (with 1/0/no value)",
                "H2"});
        fhold; fgoto body_section_skip;
    }
    
    action info_H3_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info H3 is not a flag (with 1/0/no value)",
                "H3"});
        fhold; fgoto body_section_skip;
    }
    
    action info_MQ_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info MQ value is not a number",
                "MQ"});
        fhold; fgoto body_section_skip;
    }
    
    action info_MQ0_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info MQ0 value is not an integer number",
                "MQ0"});
        fhold; fgoto body_section_skip;
    }
    
    action info_NS_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info NS value is not an integer number",
                "NS"});
        fhold; fgoto body_section_skip;
    }
    
    action info_SB_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info SB value is not a number",
                "SB"});
        fhold; fgoto body_section_skip;
    }
    
    action info_SOMATIC_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info SOMATIC is not a flag (with 1/0/no value)",
                "SOMATIC"});
        fhold; fgoto body_section_skip;
    }
    
    action info_VALIDATED_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info VALIDATED is not a flag (with 1/0/no value)",
                "VALIDATED"});
        fhold; fgoto body_section_skip;
    }
    
    action info_1000G_error {
        ErrorPolicy::handle_error(*this, new InfoBodyError{
                n_lines,
                "Info 1000G is not a flag (with 1/0/no value)",
                "1000G"});
        fhold; fgoto body_section_skip;
    }
    
    # Format
    action format_error {
        ErrorPolicy::handle_error(*this, new FormatBodyError{n_lines});
        fhold; fgoto body_section_skip;
    }

    # Samples
    action sample_error {
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " is not a valid string";
        ErrorPolicy::handle_error(*this, new SamplesBodyError{n_lines, message_stream.str()});
        fhold; fgoto body_section_skip;
    }
    
    action sample_gt_error {
        std::ostringstream message_stream;
        message_stream << "Sample #" << (n_columns - 9) << " does not start with a valid genotype";
        ErrorPolicy::handle_error(*this, new SamplesFieldBodyError{n_lines, message_stream.str(), "GT"});
        fhold; fgoto body_section_skip;
    }

    #################################################
    #               Machine definition              #
    #################################################

    
    NL = ("\n" | "\r\n") >line_break;
    CS = "\t" >tab_break;

    # Integer and floating-point numbers
    any_number      = ("-" | "+")? (digit)+ ("." (digit)+)? (("e"|"E") ("+"|"-")? (digit)+)? |
                      ("-" | "+")? "Inf" |
                      "NaN" ;
    int_number      = ("-" | "+")? (digit)+ ;
    nat_number      = (digit)+ ;
    # Bases are case-insensitive
    bases           = ("A" | "C" | "G" | "T" | "N" | "a" | "c" | "t" | "g" | "n" )+ ;
    # Identifiers may contain some symbols, but not only those 
    # TODO Could it accept more symbols? Comma won't be, for sure
    identifier      = ( (alnum | "." | "_" | "-" )+ - (punct)+ ) >token_begin @token_middle %token_end;
    # ALT ID (can be used from meta entries or in the ALT column)
    alt_id          = ( alnum | (punct - ("," | "<" | ">")) )+ - (punct)+ ;
    
    ## A chromosome must be a string with no white-spaces or colons, and may be surronded by < > symbols (for contigs)
    chrom_basic     = alnum ( alnum | punct - (":" | "<" | ">" | ",") )* ;
    chrom_contig    = "<" chrom_basic ">" ;
    chromosome      = chrom_basic | chrom_contig ;
    
    # URL inspired in http://stackoverflow.com/questions/8784903/failed-to-convert-url-parser-regular-expression-to-ragel
    scheme    = (alpha (any - [:/?#] - NL)+ ) ;
    authority = (alpha (any - [/?#] - NL)* ) | ( (digit{1,3}) ("." digit{1,3}){3} ) ;
    path      = (any - [?#] - NL)* ;
    query     = (any - [#] - NL)* ;
    fragment  = (any - NL)* ; 
    url       = (scheme "://" authority path ("?" query)? ("#" fragment)?) >token_begin @token_middle %token_end ;

    # File format line
    fileformat_name = "VCFv4.2" >token_begin $token_middle %fileformat_end $err(fileformat_error) ;
    fileformat      = "##fileformat=" fileformat_name ;

    # Meta-data
    meta_typeid     = ( ( print - "=" )+ - ("ALT" | "FILTER" | "FORMAT" | "INFO" | "assembly" | "contig" | "SAMPLE" | "PEDIGREE" | "pedigreeDB") ) >token_begin @token_middle %meta_typeid_generic ;
    meta_key        = ( (alnum | "." | "_" | "-" )+ - (punct)+ ) >token_begin @token_middle %meta_key_generic;
    
    ## A value can be expressed in multiple ways:
    ## - The line is a single key-value pair (meta_value): the value cannot start with an angle bracket, quote or linebreak, but it is free text thereafter
    ## - One of multiple key-value pairs, non-quoted (meta_field_value): the value cannot contain a comma -end of field-, or a closing angle bracket -end of entry-, or quote
    ## - One of multiple key-value pairs, quoted (meta_field_desc): the value can contain any character except for non-escaped quotes
    meta_value      = ((print - ("<" | "\"" | NL)) (print)*)	>token_begin $token_middle %token_end ;
    meta_field_value= (print - ("," | ">" | "\""))+		>token_begin $token_middle %token_end ;
    meta_field_desc = (("\\" print) | (print - "\""))*		>token_begin $token_middle %token_end ;
    
    meta_values     = ("\"" meta_field_desc "\"") | meta_field_value ;
    meta_field      = meta_key "=" meta_values ;
    
    meta_field_num  = ( (digit)+ | "A" | "R" | "G" | "." ) >token_begin @token_middle %token_end ;
    meta_field_type = (alpha)+ >token_begin @token_middle %token_end ;
    
    meta_alt        = "ID=" %meta_id alt_id >token_begin @token_middle %token_end $err(meta_alt_id_err)
                        ",Description=" %meta_description "\"" meta_field_desc "\"" $err(meta_desc_err)
                        ("," identifier $err(meta_id_err) "=\"" meta_field_desc "\"" $err(meta_desc_err))* ;

    meta_assembly   = url $err(meta_url_err) ;
    
    meta_contig     = "ID=" %meta_id chrom_basic >token_begin $token_middle %token_end $err(meta_id_err) 
                        ("," identifier "=" meta_values)* ;
                        
    meta_filter     = "ID=" %meta_id identifier $err(meta_id_err)
                        ",Description=" %meta_description "\"" meta_field_desc "\"" $err(meta_desc_err)
                        ("," identifier $err(meta_id_err) "=\"" meta_field_desc "\"" $err(meta_desc_err))* ;
    
    meta_format     = "ID=" %meta_id identifier $err(meta_id_err)
                        ",Number=" %meta_number meta_field_num $err(meta_format_number_err) 
                        ",Type=" %meta_type meta_field_type $err(meta_info_type_err)
                        ",Description=" %meta_description "\"" meta_field_desc "\"" $err(meta_desc_err)
                        ("," identifier $err(meta_id_err) "=\"" meta_field_desc "\"" $err(meta_desc_err))* ;

    meta_info       = "ID=" %meta_id identifier $err(meta_id_err) 
                        ",Number=" %meta_number meta_field_num $err(meta_info_number_err)  
                        ",Type=" %meta_type meta_field_type $err(meta_info_type_err)
                        ",Description=" %meta_description "\"" meta_field_desc "\"" $err(meta_desc_err)
                        ("," identifier $err(meta_id_err) "=\"" meta_field_desc "\"" $err(meta_desc_err))* ;
                        
    meta_pedigree   = identifier $err(meta_id_err) "=" identifier $err(meta_id_err)  
                        ("," identifier $err(meta_id_err) "=" identifier $err(meta_id_err))* ;
    
    meta_pedigreeDB = url $err(meta_url_err) ;
    
    ## TODO The error shown when "Description" is missing shows that Mixture is not a valid string
    meta_sample     = "ID=" %meta_id identifier $err(meta_id_err)
                        (",Genomes=" %meta_genomes meta_field_value) $err(meta_sample_genomes_err)
                        (",Mixture=" %meta_mixture meta_field_value) $err(meta_sample_mixture_err)
                        (",Description=" %meta_description "\"" meta_field_desc "\"") $err(meta_desc_err) ;

    meta_entry      = "##" ( 
                       ("ALT"		%meta_typeid_alt 	"=<" meta_alt ">" )		$err(meta_alt_err) | 
                       ("FILTER"	%meta_typeid_filter	"=<" meta_filter ">" )		$err(meta_filter_err) | 
                       ("FORMAT"	%meta_typeid_format	"=<" meta_format ">" )		$err(meta_format_err) |
                       ("INFO"		%meta_typeid_info	"=<" meta_info ">" )		$err(meta_info_err) | 
                       ("assembly"	%meta_typeid_assembly	"=" meta_assembly )		$err(meta_assembly_err) |
                       ("contig"	%meta_typeid_contig	"=<" meta_contig ">" )		$err(meta_contig_err) |
                       ("SAMPLE"	%meta_typeid_sample	"=<" meta_sample ">" )		$err(meta_sample_err) |
                       ("PEDIGREE"	%meta_typeid_pedigree	"=<" meta_pedigree ">" )	$err(meta_pedigree_err) |
                       ("pedigreeDB"	%meta_typeid_pedigreedb	"=<" meta_pedigreeDB ">" )	$err(meta_pedigreedb_err) |
                       (meta_typeid "=" 
                         (
                           ("<" meta_field ("," meta_field)* ">") | 
                           ("\"" meta_field_desc "\"") |
                           ("<\"" meta_field_desc "\">") |
                           meta_value
                         )
                       )
                      ) %meta_entry_end;

    # Header between meta and records
    sample_name     = (print - (NL | CS))+ >token_begin @token_middle %sample_name_end;
    header          = ("#CHROM" CS "POS" CS "ID" CS "REF" CS "ALT" CS "QUAL" CS "FILTER" CS "INFO") $err(header_prefix_err)
                      (CS "FORMAT" (CS sample_name)+ )? %header_end ;

    # Records
    position        = nat_number ;
    
    record_chrom    = chrom_basic >token_begin $token_middle %token_end |
                      "<" chrom_basic >token_begin $token_middle %token_end ">" ;
    
    record_position = position >token_begin @token_middle %token_end ;

    ## ID must be a (list of) string with no white-spaces or semi-colons
    record_id_value = (print - (space | ";"))+ >token_begin @token_middle %token_end ;
    record_id_empty = "." >token_begin @token_middle %token_end ;
    record_id       = record_id_value (";" record_id_value)* | record_id_empty ;

    record_ref      = bases >token_begin @token_middle %token_end ;

    ## A basic ALT can be something like AGT (biallelic) or A,AT (multiallelic)
    record_alt_snv  = bases ;
    
    ## Indel alternates can be represented by standardized prefixes or an asterisk
    record_alt_indel= "<DEL>" | "<INS>" | "<DUP>" | "<INV>" | "<CNV>" | "<DUP:TANDEM>" | "<DEL:ME:" (alnum)+ ">" | "<INS:ME:" (alnum)+ ">" | "*";
    
    ## Structural variants follow forms like:
    ## ]1:1234]ATG or ]<contig_1>:1234]ATG : paired breakends
    ## .AGT, AGT.: single breakends
    record_alt_sv   = "]" chromosome ":" position "]" bases |
                      "[" chromosome ":" position "[" bases |
                      bases "]" chromosome ":" position "]" |
                      bases "[" chromosome ":" position "[" | 
                      "." bases | 
                      bases "." ;

    ## Other alternates can be any identifier surrounded by < > symbols
    record_alt_other= ("<" alt_id ">") - ("<DEL>" | "<INS>" | "<DUP>" | "<INV>" | "<CNV>" | "<DUP:TANDEM>" | "<DEL:ME:" (alnum)+ ">" | "<INS:ME:" (alnum)+ ">");
    ## No variant, must be the only ALT allele
    record_alt_empty= "." ;
    
    ## Main alternate allele rule
    record_alt_data = ( record_alt_snv |
                        record_alt_indel |
                        record_alt_sv |
                        record_alt_other ) >token_begin $token_middle %token_end ;
    record_alt      = (
                       (record_alt_data ("," record_alt_data)*) |
                       (record_alt_empty >token_begin $token_middle %token_end)
                      ) ;
                      
    record_qual     = (any_number | ".") >token_begin $token_middle %token_end ;

    record_fil_value= ((alnum | punct - ";")+ - (punct)+) >token_begin @token_middle %token_end ;
    record_fil_empty= "." >token_begin @token_middle %token_end ;
    record_filter   = (record_fil_value (";" record_fil_value)*) | record_fil_empty ;

    info_key        = ( alnum | (punct - (";" | "=")) )+ - 
                        ( "AA" | "AC" | "AF" | "AN" | "BQ" | "CIGAR" | "DB" | "DP" | "END" | "H2" | "H3" | "MQ" | "MQ0" | "NS" | "SB" | "SOMATIC" | "VALIDATED" | "1000G" | (punct)+ ) ;
    info_value      = (print - (space | ";"))+ ;
    info_value_list = info_value ("," info_value)* ;
    info_aa         = (print - (space | "," | ";" | "="))+ ;
    cigar_value     = ([0-9]+[MIDNSHPX])+ ;
    info_cigar      = cigar_value ("," cigar_value)* ;
    info_entry_snv  = "AA=" info_aa				$err(info_AA_error) |
                      "AC=" (nat_number ("," nat_number)*) 	$err(info_AC_error) |
                      "AF=" (any_number ("," any_number)*) 	$err(info_AF_error) |
                      "AN=" nat_number				$err(info_AN_error) |
                      "BQ=" any_number				$err(info_BQ_error) |
                      "CIGAR=" info_cigar	 		$err(info_CIGAR_error) |
                      "DB" ("=" ("1" | "0"))? 			$err(info_DB_error) |
                      "DP=" nat_number				$err(info_DP_error) |
                      "END=" nat_number 			$err(info_END_error) |
                      "H2" ("=" ("1" | "0"))? 			$err(info_H2_error) | 
                      "H3" ("=" ("1" | "0"))? 			$err(info_H3_error) |
                      "MQ=" any_number 				$err(info_MQ_error) |
                      "MQ0=" nat_number 			$err(info_MQ0_error) |
                      "NS="  nat_number 			$err(info_NS_error) |
                      "SB=" any_number 				$err(info_SB_error) |
                      "SOMATIC" ("=" ("1" | "0"))? 		$err(info_SOMATIC_error) |
                      "VALIDATED" ("=" ("1" | "0"))?		$err(info_VALIDATED_error) |
                      "1000G" ("=" ("1" | "0"))? 		$err(info_1000G_error) ;
    info_entry      = (
                        info_entry_snv |
                        info_key $err(info_key_error) | 
                        info_key $err(info_key_error) "=" info_value_list $err(info_value_error)
                      ) >token_begin $token_middle %token_end ;
    record_info     = ( info_entry (";" info_entry)* ) | 
                      ( "." >token_begin @token_middle %token_end ) ;

    ## Accepting non-alphanumeric characters is an addition in v4.3, but widely used in already existing files
    format_value    = (alnum)+ >token_begin $token_middle %token_end ;
    record_format   = format_value (":" format_value)* ;
    
    ## In a sample, if a genotype is present it must be the first field
    sample_allele   = (digit)+ | "." ;
    sample_gt       = (sample_allele (("/" | "|") sample_allele)*) ;
    sample_value    = (alnum | (punct - ":"))+ | "." ;
    sample_values   = sample_value (":" sample_value)* ;
    record_sample   = (
                        sample_gt $err(sample_gt_error) (":" sample_values)? |
                        sample_values
                      ) >token_begin $token_middle %token_end ;
    
    
    record          = (
                        record_chrom 		%record_field_end $err(chrom_error)
                        CS record_position	%record_field_end $err(pos_error)
                        CS record_id 		%record_field_end $err(id_error)
                        CS record_ref 		%record_field_end $err(ref_error)
                        CS record_alt 		%record_field_end $err(alt_error) 
                        CS record_qual		%record_field_end $err(qual_error) 
                        CS record_filter 	%record_field_end $err(filter_error) 
                        CS record_info		%record_field_end $err(info_error) 
                        (CS record_format	%record_field_end $err(format_error)
                        (CS record_sample	%record_field_end $err(sample_error))+ )?
                      ) %record_end;

    fileformat_section = (fileformat NL) $err(fileformat_section_error);
    meta_section    = (meta_entry NL)* $err(meta_section_error);
    header_section  = (header NL) $err(header_section_error);
    body_section    = (record (NL record)*)? $err(body_section_error);


    # Machine start (fileformat, then optional meta, header, then optional records)
    main            := fileformat_section
                        meta_section
                        header_section
                        body_section >meta_section_end 
                        (NL)* ;

    # Error recovery machines that skip until the next line and restart the
    # the most appropriate section state.
    meta_section_skip := [^\n]* NL @{ fgoto meta_section; };
    body_section_skip := [^\n]* NL @{ fgoto body_section; };
}%%

namespace
{
  %%{
  write data;
  }%%
}

namespace ebi
{
  namespace vcf
  {
   
    template <typename Configuration>
    ParserImpl_v42<Configuration>::ParserImpl_v42(std::shared_ptr<Source> source)
    : ParserImpl{source}
    {
      %%{
      write init;
      }%%
    }

    template <typename Configuration>
    void ParserImpl_v42<Configuration>::parse_buffer(char const * p, char const * pe, char const * eof)
    {
      %%{
      write exec;
      }%%
    }
   
  }
}
