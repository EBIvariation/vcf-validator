// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Error
  //

  inline
  access::object_traits< ::ebi::vcf::Error >::id_type
  access::object_traits< ::ebi::vcf::Error >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::ebi::vcf::Error >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::Error >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ErrorCount
  //

  inline
  void access::view_traits< ::ebi::vcf::ErrorCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MetaSectionError
  //

  inline
  access::object_traits< ::ebi::vcf::MetaSectionError >::id_type
  access::object_traits< ::ebi::vcf::MetaSectionError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::MetaSectionError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::MetaSectionError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // HeaderSectionError
  //

  inline
  access::object_traits< ::ebi::vcf::HeaderSectionError >::id_type
  access::object_traits< ::ebi::vcf::HeaderSectionError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::HeaderSectionError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::HeaderSectionError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BodySectionError
  //

  inline
  access::object_traits< ::ebi::vcf::BodySectionError >::id_type
  access::object_traits< ::ebi::vcf::BodySectionError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::BodySectionError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::BodySectionError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // NoMetaDefinitionError
  //

  inline
  access::object_traits< ::ebi::vcf::NoMetaDefinitionError >::id_type
  access::object_traits< ::ebi::vcf::NoMetaDefinitionError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::NoMetaDefinitionError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::NoMetaDefinitionError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FileformatError
  //

  inline
  access::object_traits< ::ebi::vcf::FileformatError >::id_type
  access::object_traits< ::ebi::vcf::FileformatError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::FileformatError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::FileformatError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ChromosomeBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::ChromosomeBodyError >::id_type
  access::object_traits< ::ebi::vcf::ChromosomeBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::ChromosomeBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::ChromosomeBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // PositionBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::PositionBodyError >::id_type
  access::object_traits< ::ebi::vcf::PositionBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::PositionBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::PositionBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // IdBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::IdBodyError >::id_type
  access::object_traits< ::ebi::vcf::IdBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::IdBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::IdBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ReferenceAlleleBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >::id_type
  access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AlternateAllelesBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >::id_type
  access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // QualityBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::QualityBodyError >::id_type
  access::object_traits< ::ebi::vcf::QualityBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::QualityBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::QualityBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FilterBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::FilterBodyError >::id_type
  access::object_traits< ::ebi::vcf::FilterBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::FilterBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::FilterBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // InfoBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::InfoBodyError >::id_type
  access::object_traits< ::ebi::vcf::InfoBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::InfoBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::InfoBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FormatBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::FormatBodyError >::id_type
  access::object_traits< ::ebi::vcf::FormatBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::FormatBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::FormatBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SamplesBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::SamplesBodyError >::id_type
  access::object_traits< ::ebi::vcf::SamplesBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::SamplesBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::SamplesBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SamplesFieldBodyError
  //

  inline
  access::object_traits< ::ebi::vcf::SamplesFieldBodyError >::id_type
  access::object_traits< ::ebi::vcf::SamplesFieldBodyError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::SamplesFieldBodyError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::SamplesFieldBodyError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // NormalizationError
  //

  inline
  access::object_traits< ::ebi::vcf::NormalizationError >::id_type
  access::object_traits< ::ebi::vcf::NormalizationError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::NormalizationError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::NormalizationError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // DuplicationError
  //

  inline
  access::object_traits< ::ebi::vcf::DuplicationError >::id_type
  access::object_traits< ::ebi::vcf::DuplicationError >::
  id (const object_type& o)
  {
    return object_traits< ::ebi::vcf::Error >::id (o);
  }

  inline
  void access::object_traits< ::ebi::vcf::DuplicationError >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::DuplicationError >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MatchStats
  //

  inline
  access::object_traits< ::ebi::vcf::MatchStats >::id_type
  access::object_traits< ::ebi::vcf::MatchStats >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::ebi::vcf::MatchStats >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::ebi::vcf::MatchStats >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MatchStatsCount
  //

  inline
  void access::view_traits< ::ebi::vcf::MatchStatsCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

#include <odb/details/unique-ptr.hxx>

namespace odb
{
  // Error
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // ErrorCount
  //

  // MetaSectionError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // HeaderSectionError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // BodySectionError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // NoMetaDefinitionError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // FileformatError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // ChromosomeBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // PositionBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // IdBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // ReferenceAlleleBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // AlternateAllelesBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // QualityBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // FilterBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // InfoBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // FormatBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // SamplesBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // SamplesFieldBodyError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // NormalizationError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // DuplicationError
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::ebi::vcf::Error, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // MatchStats
  //

  inline
  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MatchStatsCount
  //
}

