// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ERROR_ODB_HPP
#define ERROR_ODB_HPP

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "vcf/error.hpp"

#include <memory>
#include <cstddef>
#include <string>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/polymorphic-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Error
  //
  template <>
  struct class_traits< ::ebi::vcf::Error >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::Error >
  {
    public:
    typedef ::ebi::vcf::Error object_type;
    typedef ::ebi::vcf::Error* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;

    static const std::size_t depth = 1UL;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ErrorCount
  //
  template <>
  struct class_traits< ::ebi::vcf::ErrorCount >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::ebi::vcf::ErrorCount >
  {
    public:
    typedef ::ebi::vcf::ErrorCount view_type;
    typedef ::ebi::vcf::ErrorCount* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // MetaSectionError
  //
  template <>
  struct class_traits< ::ebi::vcf::MetaSectionError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::MetaSectionError >
  {
    public:
    typedef ::ebi::vcf::MetaSectionError object_type;
    typedef ::ebi::vcf::MetaSectionError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::Error base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // HeaderSectionError
  //
  template <>
  struct class_traits< ::ebi::vcf::HeaderSectionError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::HeaderSectionError >
  {
    public:
    typedef ::ebi::vcf::HeaderSectionError object_type;
    typedef ::ebi::vcf::HeaderSectionError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::Error base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // BodySectionError
  //
  template <>
  struct class_traits< ::ebi::vcf::BodySectionError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::BodySectionError >
  {
    public:
    typedef ::ebi::vcf::BodySectionError object_type;
    typedef ::ebi::vcf::BodySectionError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::Error base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // NoMetaDefinitionError
  //
  template <>
  struct class_traits< ::ebi::vcf::NoMetaDefinitionError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::NoMetaDefinitionError >
  {
    public:
    typedef ::ebi::vcf::NoMetaDefinitionError object_type;
    typedef ::ebi::vcf::NoMetaDefinitionError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::Error base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // FileformatError
  //
  template <>
  struct class_traits< ::ebi::vcf::FileformatError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::FileformatError >
  {
    public:
    typedef ::ebi::vcf::FileformatError object_type;
    typedef ::ebi::vcf::FileformatError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::MetaSectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ChromosomeBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::ChromosomeBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::ChromosomeBodyError >
  {
    public:
    typedef ::ebi::vcf::ChromosomeBodyError object_type;
    typedef ::ebi::vcf::ChromosomeBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // PositionBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::PositionBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::PositionBodyError >
  {
    public:
    typedef ::ebi::vcf::PositionBodyError object_type;
    typedef ::ebi::vcf::PositionBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // IdBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::IdBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::IdBodyError >
  {
    public:
    typedef ::ebi::vcf::IdBodyError object_type;
    typedef ::ebi::vcf::IdBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ReferenceAlleleBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::ReferenceAlleleBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >
  {
    public:
    typedef ::ebi::vcf::ReferenceAlleleBodyError object_type;
    typedef ::ebi::vcf::ReferenceAlleleBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // AlternateAllelesBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::AlternateAllelesBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >
  {
    public:
    typedef ::ebi::vcf::AlternateAllelesBodyError object_type;
    typedef ::ebi::vcf::AlternateAllelesBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // QualityBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::QualityBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::QualityBodyError >
  {
    public:
    typedef ::ebi::vcf::QualityBodyError object_type;
    typedef ::ebi::vcf::QualityBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // FilterBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::FilterBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::FilterBodyError >
  {
    public:
    typedef ::ebi::vcf::FilterBodyError object_type;
    typedef ::ebi::vcf::FilterBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // InfoBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::InfoBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::InfoBodyError >
  {
    public:
    typedef ::ebi::vcf::InfoBodyError object_type;
    typedef ::ebi::vcf::InfoBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // FormatBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::FormatBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::FormatBodyError >
  {
    public:
    typedef ::ebi::vcf::FormatBodyError object_type;
    typedef ::ebi::vcf::FormatBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SamplesBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::SamplesBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::SamplesBodyError >
  {
    public:
    typedef ::ebi::vcf::SamplesBodyError object_type;
    typedef ::ebi::vcf::SamplesBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SamplesFieldBodyError
  //
  template <>
  struct class_traits< ::ebi::vcf::SamplesFieldBodyError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::SamplesFieldBodyError >
  {
    public:
    typedef ::ebi::vcf::SamplesFieldBodyError object_type;
    typedef ::ebi::vcf::SamplesFieldBodyError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // NormalizationError
  //
  template <>
  struct class_traits< ::ebi::vcf::NormalizationError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::NormalizationError >
  {
    public:
    typedef ::ebi::vcf::NormalizationError object_type;
    typedef ::ebi::vcf::NormalizationError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DuplicationError
  //
  template <>
  struct class_traits< ::ebi::vcf::DuplicationError >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::DuplicationError >
  {
    public:
    typedef ::ebi::vcf::DuplicationError object_type;
    typedef ::ebi::vcf::DuplicationError* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::ebi::vcf::Error root_type;
    typedef ::ebi::vcf::BodySectionError base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 3UL;

    typedef object_traits< ::ebi::vcf::Error >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<object_traits<root_type>::pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<root_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MatchStats
  //
  template <>
  struct class_traits< ::ebi::vcf::MatchStats >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ebi::vcf::MatchStats >
  {
    public:
    typedef ::ebi::vcf::MatchStats object_type;
    typedef ::ebi::vcf::MatchStats* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MatchStatsCount
  //
  template <>
  struct class_traits< ::ebi::vcf::MatchStatsCount >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::ebi::vcf::MatchStatsCount >
  {
    public:
    typedef ::ebi::vcf::MatchStatsCount view_type;
    typedef ::ebi::vcf::MatchStatsCount* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Error
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::Error, id_sqlite, A >
  {
    // line
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    line_type_;

    static const line_type_ line;

    // message
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    message_type_;

    static const message_type_ message;

    // detailed_message
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    detailed_message_type_;

    static const detailed_message_type_ detailed_message;

    // severity
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::Severity,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    severity_type_;

    static const severity_type_ severity;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    typeid__type_;

    static const typeid__type_ typeid_;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::line_type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  line (A::table_name, "\"line\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::message_type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  message (A::table_name, "\"message\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::detailed_message_type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  detailed_message (A::table_name, "\"detailed_message\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::severity_type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  severity (A::table_name, "\"severity\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::Error, id_sqlite, A >::typeid__type_
  query_columns< ::ebi::vcf::Error, id_sqlite, A >::
  typeid_ (A::table_name, "\"typeid\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::Error, id_sqlite, A >:
    query_columns< ::ebi::vcf::Error, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >:
    public access::object_traits< ::ebi::vcf::Error >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      std::size_t discriminator_size;
      bool discriminator_null;

      std::size_t version;
    };

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static map_type* map;
    static const info_type info;

    struct image_type
    {
      // line
      //
      long long line_value;
      bool line_null;

      // message
      //
      details::buffer message_value;
      std::size_t message_size;
      bool message_null;

      // detailed_message
      //
      details::buffer detailed_message_value;
      std::size_t detailed_message_size;
      bool detailed_message_null;

      // severity
      //
      long long severity_value;
      bool severity_null;

      // id_
      //
      long long id_value;
      bool id_null;

      // typeid_
      //
      details::buffer typeid_value;
      std::size_t typeid_size;
      bool typeid_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    sqlite::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 4UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::Error, id_common >:
    public access::object_traits_impl< ::ebi::vcf::Error, id_sqlite >
  {
  };

  // ErrorCount
  //
  template <>
  class access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >:
    public access::view_traits< ::ebi::vcf::ErrorCount >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::ebi::vcf::ErrorCount, id_common >:
    public access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >
  {
  };

  // MetaSectionError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits >
  {
    // Error
    //
    typedef query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits > Error;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // error_fix
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::ErrorFix,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    error_fix_type_;

    static const error_fix_type_ error_fix;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    value_type_;

    static const value_type_ value;

    // expected_value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    expected_value_type_;

    static const expected_value_type_ expected_value;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::error_fix_type_
  query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::
  error_fix (A::table_name, "\"error_fix\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::value_type_
  query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::expected_value_type_
  query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >::
  expected_value (A::table_name, "\"expected_value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::MetaSectionError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // error_fix
      //
      long long error_fix_value;
      bool error_fix_null;

      // value
      //
      details::buffer value_value;
      std::size_t value_size;
      bool value_null;

      // expected_value
      //
      details::buffer expected_value_value;
      std::size_t expected_value_size;
      bool expected_value_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 2UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::MetaSectionError, id_sqlite >
  {
  };

  // HeaderSectionError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::HeaderSectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits >
  {
    // Error
    //
    typedef query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits > Error;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::HeaderSectionError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::HeaderSectionError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::HeaderSectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::HeaderSectionError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::HeaderSectionError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::HeaderSectionError, id_sqlite >
  {
  };

  // BodySectionError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::BodySectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits >
  {
    // Error
    //
    typedef query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits > Error;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::BodySectionError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::BodySectionError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::BodySectionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::BodySectionError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::BodySectionError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::BodySectionError, id_sqlite >
  {
  };

  // NoMetaDefinitionError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::NoMetaDefinitionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits >
  {
    // Error
    //
    typedef query_columns< ::ebi::vcf::Error, id_sqlite, typename A::base_traits > Error;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::NoMetaDefinitionError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::NoMetaDefinitionError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::NoMetaDefinitionError, id_sqlite, A >:
    query_columns< ::ebi::vcf::NoMetaDefinitionError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::NoMetaDefinitionError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::NoMetaDefinitionError, id_sqlite >
  {
  };

  // FileformatError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::FileformatError, id_sqlite, A >:
    query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, typename A::base_traits >
  {
    // MetaSectionError
    //
    typedef query_columns< ::ebi::vcf::MetaSectionError, id_sqlite, typename A::base_traits > MetaSectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::FileformatError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::FileformatError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::FileformatError, id_sqlite, A >:
    query_columns< ::ebi::vcf::FileformatError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::FileformatError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FileformatError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::FileformatError, id_sqlite >
  {
  };

  // ChromosomeBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::ChromosomeBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::ChromosomeBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::ChromosomeBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::ChromosomeBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::ChromosomeBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::ChromosomeBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::ChromosomeBodyError, id_sqlite >
  {
  };

  // PositionBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::PositionBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::PositionBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::PositionBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::PositionBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::PositionBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::PositionBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::PositionBodyError, id_sqlite >
  {
  };

  // IdBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // error_fix
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::ErrorFix,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    error_fix_type_;

    static const error_fix_type_ error_fix;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >::error_fix_type_
  query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >::
  error_fix (A::table_name, "\"error_fix\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::IdBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::IdBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // error_fix
      //
      long long error_fix_value;
      bool error_fix_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::IdBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::IdBodyError, id_sqlite >
  {
  };

  // ReferenceAlleleBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::ReferenceAlleleBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::ReferenceAlleleBodyError, id_sqlite >
  {
  };

  // AlternateAllelesBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::AlternateAllelesBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::AlternateAllelesBodyError, id_sqlite >
  {
  };

  // QualityBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::QualityBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::QualityBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::QualityBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::QualityBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::QualityBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::QualityBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::QualityBodyError, id_sqlite >
  {
  };

  // FilterBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // error_fix
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::ErrorFix,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    error_fix_type_;

    static const error_fix_type_ error_fix;

    // field
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    field_type_;

    static const field_type_ field;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::error_fix_type_
  query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::
  error_fix (A::table_name, "\"error_fix\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::field_type_
  query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >::
  field (A::table_name, "\"field\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::FilterBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::FilterBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // error_fix
      //
      long long error_fix_value;
      bool error_fix_null;

      // field
      //
      details::buffer field_value;
      std::size_t field_size;
      bool field_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::FilterBodyError, id_sqlite >
  {
  };

  // InfoBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // error_fix
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::ErrorFix,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    error_fix_type_;

    static const error_fix_type_ error_fix;

    // field
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    field_type_;

    static const field_type_ field;

    // expected_value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    expected_value_type_;

    static const expected_value_type_ expected_value;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::error_fix_type_
  query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::
  error_fix (A::table_name, "\"error_fix\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::field_type_
  query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::
  field (A::table_name, "\"field\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::expected_value_type_
  query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >::
  expected_value (A::table_name, "\"expected_value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::InfoBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::InfoBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // error_fix
      //
      long long error_fix_value;
      bool error_fix_null;

      // field
      //
      details::buffer field_value;
      std::size_t field_size;
      bool field_null;

      // expected_value
      //
      details::buffer expected_value_value;
      std::size_t expected_value_size;
      bool expected_value_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 2UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::InfoBodyError, id_sqlite >
  {
  };

  // FormatBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // error_fix
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ebi::vcf::ErrorFix,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    error_fix_type_;

    static const error_fix_type_ error_fix;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >::error_fix_type_
  query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >::
  error_fix (A::table_name, "\"error_fix\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::FormatBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::FormatBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // error_fix
      //
      long long error_fix_value;
      bool error_fix_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::FormatBodyError, id_sqlite >
  {
  };

  // SamplesBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::SamplesBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::SamplesBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::SamplesBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::SamplesBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::SamplesBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::SamplesBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::SamplesBodyError, id_sqlite >
  {
  };

  // SamplesFieldBodyError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // field
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    field_type_;

    static const field_type_ field;

    // field_cardinality
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    field_cardinality_type_;

    static const field_cardinality_type_ field_cardinality;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::field_type_
  query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::
  field (A::table_name, "\"field\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::field_cardinality_type_
  query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >::
  field_cardinality (A::table_name, "\"field_cardinality\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >:
    query_columns< ::ebi::vcf::SamplesFieldBodyError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::SamplesFieldBodyError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      // field
      //
      details::buffer field_value;
      std::size_t field_size;
      bool field_null;

      // field_cardinality
      //
      long long field_cardinality_value;
      bool field_cardinality_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::SamplesFieldBodyError, id_sqlite >
  {
  };

  // NormalizationError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::NormalizationError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::NormalizationError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::NormalizationError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::NormalizationError, id_sqlite, A >:
    query_columns< ::ebi::vcf::NormalizationError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::NormalizationError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::NormalizationError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::NormalizationError, id_sqlite >
  {
  };

  // DuplicationError
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::DuplicationError, id_sqlite, A >:
    query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits >
  {
    // BodySectionError
    //
    typedef query_columns< ::ebi::vcf::BodySectionError, id_sqlite, typename A::base_traits > BodySectionError;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::DuplicationError, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::DuplicationError, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::DuplicationError, id_sqlite, A >:
    query_columns< ::ebi::vcf::DuplicationError, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >:
    public access::object_traits< ::ebi::vcf::DuplicationError >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 1UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::DuplicationError, id_common >:
    public access::object_traits_impl< ::ebi::vcf::DuplicationError, id_sqlite >
  {
  };

  // MatchStats
  //
  template <typename A>
  struct query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >
  {
    // num_matches
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    num_matches_type_;

    static const num_matches_type_ num_matches;

    // num_variants
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    num_variants_type_;

    static const num_variants_type_ num_variants;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::num_matches_type_
  query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::
  num_matches (A::table_name, "\"num_matches\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::num_variants_type_
  query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::
  num_variants (A::table_name, "\"num_variants\"", 0);

  template <typename A>
  const typename query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::id_type_
  query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >:
    query_columns< ::ebi::vcf::MatchStats, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >:
    public access::object_traits< ::ebi::vcf::MatchStats >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // num_matches
      //
      long long num_matches_value;
      bool num_matches_null;

      // num_variants
      //
      long long num_variants_value;
      bool num_variants_null;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::ebi::vcf::MatchStats, id_common >:
    public access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite >
  {
  };

  // MatchStatsCount
  //
  template <>
  class access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >:
    public access::view_traits< ::ebi::vcf::MatchStatsCount >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_common >:
    public access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >
  {
  };

  // Error
  //
  // ErrorCount
  //
  struct access::view_traits_impl< ::ebi::vcf::ErrorCount, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::ebi::vcf::Error,
      id_sqlite,
      odb::access::object_traits_impl< ::ebi::vcf::Error, id_sqlite > >
  {
  };

  // MetaSectionError
  //
  // HeaderSectionError
  //
  // BodySectionError
  //
  // NoMetaDefinitionError
  //
  // FileformatError
  //
  // ChromosomeBodyError
  //
  // PositionBodyError
  //
  // IdBodyError
  //
  // ReferenceAlleleBodyError
  //
  // AlternateAllelesBodyError
  //
  // QualityBodyError
  //
  // FilterBodyError
  //
  // InfoBodyError
  //
  // FormatBodyError
  //
  // SamplesBodyError
  //
  // SamplesFieldBodyError
  //
  // NormalizationError
  //
  // DuplicationError
  //
  // MatchStats
  //
  // MatchStatsCount
  //
  struct access::view_traits_impl< ::ebi::vcf::MatchStatsCount, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::ebi::vcf::MatchStats,
      id_sqlite,
      odb::access::object_traits_impl< ::ebi::vcf::MatchStats, id_sqlite > >
  {
  };
}

#include "vcf/error-odb.ipp"

#include <odb/post.hxx>

#endif // ERROR_ODB_HPP
